name: Code Quality Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  pylint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint pytest pytest-cov black isort mypy
    
    - name: Create .pylintrc if not exists
      run: |
        if [ ! -f .pylintrc ]; then
          echo "Creating default .pylintrc configuration..."
          cat > .pylintrc << 'EOF'
        [MASTER]
        # Specify a configuration file
        load-plugins=

        # Python code to execute, usually for sys.path manipulation
        init-hook='import sys; sys.path.append(".")'

        # Use multiple processes to speed up Pylint
        jobs=0

        # Control the amount of potential inferred values when inferring a single object
        limit-inference-results=100

        # List of plugins (as comma separated values of python modules names) to load
        load-plugins=

        # Pickle collected data for later comparisons
        persistent=yes

        # Allow loading of arbitrary C extensions
        unsafe-load-any-extension=no

        [MESSAGES CONTROL]
        # Disable specific warnings and errors
        disable=
            missing-module-docstring,
            missing-class-docstring,
            missing-function-docstring,
            too-few-public-methods,
            too-many-instance-attributes,
            too-many-arguments,
            too-many-locals,
            too-many-branches,
            too-many-statements,
            fixme,
            line-too-long,
            import-outside-toplevel,
            global-statement,
            broad-exception-caught,
            consider-using-f-string

        # Enable specific warnings
        enable=
            unused-import,
            unused-variable,
            redefined-outer-name

        [REPORTS]
        # Set the output format
        output-format=colorized

        # Include message's id in output
        include-ids=yes

        # Template used to display messages
        msg-template='{path}:{line}:{column}: [{msg_id}({symbol})] {msg}'

        # Set the cache size for astng objects
        cache-size=500

        [REFACTORING]
        # Maximum number of nested blocks for function / method body
        max-nested-blocks=5

        # Complete name of functions that never returns
        never-returning-functions=sys.exit

        [LOGGING]
        # Logging modules to check that the string format arguments are in logging function parameter format
        logging-modules=logging

        [SPELLING]
        # Spelling dictionary name
        spelling-dict=

        # List of comma separated words that should not be checked
        spelling-ignore-words=

        # A path to a file that contains private dictionary
        spelling-private-dict-file=

        # Tells whether to store unknown words to indicated private dictionary
        spelling-store-unknown-words=no

        [MISCELLANEOUS]
        # List of note tags to take in consideration
        notes=FIXME,XXX,TODO

        [TYPECHECK]
        # List of decorators that produce context managers
        contextmanager-decorators=contextlib.contextmanager

        # List of members which are set dynamically and missed by pylint inference system
        generated-members=pygame.*

        # Tells whether missing members accessed in mixin class should be ignored
        ignore-mixin-members=yes

        # Tells whether to warn about missing members when the owner of the attribute is inferred to be None
        ignore-none=yes

        # This flag controls whether pylint should warn about no-member and similar checks whenever an opaque object is returned when inferring
        ignore-on-opaque-inference=yes

        # List of class names for which member attributes should not be checked
        ignored-classes=optparse.Values,thread._local,_thread._local,pygame

        # List of module names for which member attributes should not be checked
        ignored-modules=pygame

        # Show a hint with possible names when a member name was not found
        missing-member-hint=yes

        # The minimum edit distance a name should have in order to be considered a similar match for a missing member name
        missing-member-hint-distance=1

        # The total number of similar names that should be taken in consideration when showing a hint for a missing member
        missing-member-max-choices=1

        [VARIABLES]
        # List of additional names supposed to be defined in builtins
        additional-builtins=

        # Tells whether unused global variables should be treated as a violation
        allow-global-unused-variables=yes

        # List of strings which can identify a callback function by name
        callbacks=cb_,_cb

        # A regular expression matching the name of dummy variables
        dummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_

        # Argument names that match this expression will be ignored
        ignored-argument-names=_.*|^ignored_|^unused_

        # Tells whether we should check for unused import in __init__ files
        init-import=no

        # List of qualified module names which can have objects that can redefine builtins
        redefining-builtins-modules=six.moves,past.builtins,future.builtins,builtins,io

        [FORMAT]
        # Expected format of line ending
        expected-line-ending-format=

        # Regexp for a line that is allowed to be longer than the limit
        ignore-long-lines=^\s*(# )?<?https?://\S+>?$

        # Number of spaces of indent required inside a hanging or continued line
        indent-after-paren=4

        # String used as indentation unit
        indent-string='    '

        # Maximum number of characters on a single line
        max-line-length=100

        # Maximum number of lines in a module
        max-module-lines=1000

        # Allow the body of a class to be on the same line as the declaration if body contains single statement
        single-line-class-stmt=no

        # Allow the body of an if to be on the same line as the test if there is no else
        single-line-if-stmt=no

        [SIMILARITIES]
        # Minimum lines number of a similarity
        min-similarity-lines=4

        # Ignore comments when computing similarities
        ignore-comments=yes

        # Ignore docstrings when computing similarities
        ignore-docstrings=yes

        # Ignore imports when computing similarities
        ignore-imports=no

        [BASIC]
        # Naming style matching correct argument names
        argument-naming-style=snake_case

        # Regular expression matching correct argument names
        argument-rgx=[a-z_][a-z0-9_]{2,30}$

        # Naming style matching correct attribute names
        attr-naming-style=snake_case

        # Regular expression matching correct attribute names
        attr-rgx=[a-z_][a-z0-9_]{2,30}$

        # Bad variable names which should always be refused
        bad-names=foo,bar,baz,toto,tutu,tata

        # Naming style matching correct class attribute names
        class-attribute-naming-style=any

        # Regular expression matching correct class attribute names
        class-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$

        # Naming style matching correct class names
        class-naming-style=PascalCase

        # Regular expression matching correct class names
        class-rgx=[A-Z_][a-zA-Z0-9]+$

        # Naming style matching correct constant names
        const-naming-style=UPPER_CASE

        # Regular expression matching correct constant names
        const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$

        # Minimum line length for functions/classes that require docstrings
        docstring-min-length=-1

        # Naming style matching correct function names
        function-naming-style=snake_case

        # Regular expression matching correct function names
        function-rgx=[a-z_][a-z0-9_]{2,30}$

        # Good variable names which should always be accepted
        good-names=i,j,k,ex,Run,_,x,y,r,c,row,col

        # Include a hint for the correct naming format with invalid-name
        include-naming-hint=no

        # Naming style matching correct inline iteration names
        inlinevar-naming-style=any

        # Regular expression matching correct inline iteration names
        inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$

        # Naming style matching correct method names
        method-naming-style=snake_case

        # Regular expression matching correct method names
        method-rgx=[a-z_][a-z0-9_]{2,30}$

        # Naming style matching correct module names
        module-naming-style=snake_case

        # Regular expression matching correct module names
        module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$

        # Colon-delimited sets of names that determine each other's naming style when the name regexes allow several styles
        name-group=

        # Regular expression which should only match function or class names that do not require a docstring
        no-docstring-rgx=^_

        # List of decorators that produce properties
        property-classes=abc.abstractproperty

        # Naming style matching correct variable names
        variable-naming-style=snake_case

        # Regular expression matching correct variable names
        variable-rgx=[a-z_][a-z0-9_]{2,30}$

        [IMPORTS]
        # Allow wildcard imports from modules that define __all__
        allow-wildcard-with-all=no

        # Analyse import fallback blocks
        analyse-fallback-blocks=no

        # Deprecated modules which should not be used
        deprecated-modules=optparse,tkinter.tix

        # Create a graph of external dependencies in the given file
        ext-import-graph=

        # Create a graph of every (i.e. internal and external) dependencies in the given file
        import-graph=

        # Create a graph of internal dependencies in the given file
        int-import-graph=

        # Force import order to recognize a module as part of the standard compatibility libraries
        known-standard-library=

        # Force import order to recognize a module as part of a third party library
        known-third-party=enchant

        # Couples of modules and preferred modules
        preferred-modules=

        [CLASSES]
        # List of method names used to declare (i.e. assign) instance attributes
        defining-attr-methods=__init__,__new__,setUp,__post_init__

        # List of member names, which should be excluded from the protected access warning
        exclude-protected=_asdict,_fields,_replace,_source,_make

        # List of valid names for the first argument in a class method
        valid-classmethod-first-arg=cls

        # List of valid names for the first argument in a metaclass class method
        valid-metaclass-classmethod-first-arg=cls

        [DESIGN]
        # Maximum number of arguments for function / method
        max-args=7

        # Maximum number of attributes for a class
        max-attributes=10

        # Maximum number of boolean expressions in an if statement
        max-bool-expr=5

        # Maximum number of branch for function / method body
        max-branches=12

        # Maximum number of locals for function / method body
        max-locals=15

        # Maximum number of parents for a class
        max-parents=7

        # Maximum number of public methods for a class
        max-public-methods=20

        # Maximum number of return / yield for function / method body
        max-returns=6

        # Maximum number of statements in function / method body
        max-statements=50

        # Minimum number of public methods for a class
        min-public-methods=1

        [EXCEPTIONS]
        # Exceptions that will emit a warning when being caught
        overgeneral-exceptions=BaseException,Exception
        EOF
        fi
    
    - name: Lint with pylint
      run: |
        echo "Running Pylint analysis..."
        pylint --rcfile=.pylintrc $(find . -name "*.py" -not -path "./venv/*" -not -path "./.venv/*") || true
    
    - name: Generate pylint report
      run: |
        echo "Generating detailed pylint report..."
        pylint --rcfile=.pylintrc --output-format=json $(find . -name "*.py" -not -path "./venv/*" -not -path "./.venv/*") > pylint-report.json || true
        pylint --rcfile=.pylintrc --output-format=text $(find . -name "*.py" -not -path "./venv/*" -not -path "./.venv/*") > pylint-report.txt || true
    
    - name: Check code style with black
      run: |
        echo "Checking code formatting with black..."
        black --check --diff . || echo "Code formatting issues found. Run 'black .' to fix."
    
    - name: Check import sorting with isort
      run: |
        echo "Checking import sorting with isort..."
        isort --check-only --diff . || echo "Import sorting issues found. Run 'isort .' to fix."
    
    - name: Type checking with mypy
      run: |
        echo "Running type checking with mypy..."
        mypy --ignore-missing-imports --show-error-codes . || echo "Type checking completed with warnings."
    
    - name: Upload pylint results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pylint-results-${{ matrix.python-version }}
        path: |
          pylint-report.json
          pylint-report.txt
    
    - name: Comment PR with pylint results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            const report = fs.readFileSync('pylint-report.txt', 'utf8');
            const lines = report.split('\n');
            const summary = lines.slice(-10).join('\n');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔍 Pylint Analysis Results (Python ${{ matrix.python-version }})
              
              \`\`\`
              ${summary}
              \`\`\`
              
              Full report available in the workflow artifacts.`
            });
          } catch (error) {
            console.log('Could not read pylint report:', error.message);
          }
